dnl MPCHECK - Check double LIBM functions
dnl Copyright (C) 2002, 2004, 2005 INRIA
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl 
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


dnl Process this file with autoconf to produce a configure script.
AC_INIT

mpcheck_version=`cat $srcdir/VERSION`
AM_INIT_AUTOMAKE(mpcheck, $mpcheck_version)

AC_ARG_WITH(gmp_include, [  --with-gmp-include=DIR  GMP include directory ], with_gmp_include=$withval)
AC_ARG_WITH(gmp_lib, [  --with-gmp-lib=DIR      GMP lib directory ], with_gmp_lib=$withval)
AC_ARG_WITH(gmp, [  --with-gmp=DIR          GMP install directory ], with_gmp_include=$withval/include with_gmp_lib=$withval/lib)

AC_ARG_WITH(mpfr_include, [  --with-mpfr-include=DIR MPFR include directory ], with_mpfr_include=$withval)
AC_ARG_WITH(mpfr_lib, [  --with-mpfr-lib=DIR     MPFR lib directory ], with_mpfr_lib=$withval)
AC_ARG_WITH(mpfr, [  --with-mpfr=DIR         MPFR install directory ], with_mpfr_include=$withval/include with_mpfr_lib=$withval/lib)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_CANONICAL_HOST
AC_CHECK_OS
AC_CHECK_MACHTYPE
AC_C_CONST
AC_C_VOLATILE

dnl Well, we don't need all the MPFR tests, but it is easier.
MPFR_CONFIGS
AC_CHECK_HEADERS([float.h math.h stdio.h stdlib.h limits.h])

dnl If compiler is gcc, then use some specific flags.
dnl But don't touch user specified flags.
if test -n "$GCC"; then
  CFLAGS="-Wall -static $CFLAGS"
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#if __GNUC__ < 3
# error "GCC too old!"
#endif
]], [[]])],[CFLAGS="-std=c99 $CFLAGS"])

fi
dnl If it an alphaev6 add specific flags, otherwise it won't work
case $host in
alphaev6-*-*)
  if test -n "$GCC"; then
    CFLAGS="$CFLAGS -mcpu=ev6"
  fi
esac

dnl Tests concerning the include directories.
if test -d "$with_gmp_include"; then
  CPPFLAGS="$CPPFLAGS -I$with_gmp_include"
fi
if test -d "$with_mpfr_include"; then
  CPPFLAGS="$CPPFLAGS -I$with_mpfr_include"
fi

dnl Check for GMP
AC_MSG_CHECKING(for gmp.h)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include "gmp.h"
]], [[]])],[AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)
     AC_MSG_ERROR([gmp.h may be missing])
])
AC_MSG_CHECKING(for recent GMP)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include "gmp.h"
#if (__GNU_MP_VERSION < 4)
# error "min: GMP 4.0.0"
#endif
]], [[]])],[AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)
     AC_MSG_ERROR([GMP >= 4.0.0 required])
])

dnl Check for MPFR
AC_MSG_CHECKING(for mpfr.h)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include "gmp.h"
#include "mpfr.h"
]], [[]])],[AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)
     AC_MSG_ERROR([mpfr.h may be missing])
])
AC_MSG_CHECKING(for recent MPFR)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include "gmp.h"
#include "mpfr.h"
#ifndef MPFR_VERSION
# error "min: MPFR 2.2.0"
#endif
#if MPFR_VERSION < MPFR_VERSION_NUM (2,2,0)
# error "min: MPFR 2.2.0"
#endif
]], [[]])],[AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)
     AC_MSG_ERROR([MPFR >= 2.2.0 required])
])

dnl Update Libraries directory
AC_CHECK_LIB(m, main, , AC_MSG_ERROR(libm not found))
AC_MY_LIBS($with_gmp_lib, gmp)
AC_MY_LIBS($with_mpfr_lib, mpfr)

dnl Check for CRLIBM
AC_MSG_CHECKING(for CRLIBM)
old_LIBS=$LIBS
LIBS="-lcrlibm $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include "crlibm.h"
]], [[
 exp_rn (2.0)
]])],[
 AC_DEFINE([HAVE_CRLIBM], 1, [CRLIBM was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])

dnl Check for MathLib
AC_MSG_CHECKING(for MATHLIB)
old_LIBS=$LIBS
LIBS="-lultim $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include "MathLib.h"
]], [[
 uexp (5.0);
]])],[
 AC_DEFINE([HAVE_MATHLIB], 1, [MATHLIB was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])

dnl Check for LibMcr
AC_MSG_CHECKING(for LIBMCR)
old_LIBS=$LIBS
LIBS="-lmcr $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include "libmcr.h"
]], [[
 __libmcr_exp (5.0);
]])],[
 AC_DEFINE([HAVE_LIBMCR], 1, [LIBMCR was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])

dnl Check for PARI
AC_MSG_CHECKING(for PARI)
old_LIBS=$LIBS
LIBS="-lpari $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
typedef unsigned long ulong; /* Bingo! Bravo PARI! */
#include "pari/pari.h"
]], [[
pari_init (10, 10);
]])],[
 AC_DEFINE([HAVE_PARI], 1, [PARI was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])

dnl Check for NTL
AC_MSG_CHECKING(for NTL)
AC_LANG(C++)
old_LIBS=$LIBS
LIBS="-lntl $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#define NTL_STD_CXX
#include "NTL/RR.h"
using namespace NTL;
]], [[
 RR a;
]])],[
 AC_DEFINE([HAVE_NTL], 1, [NTL was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])
AC_LANG(C)

dnl Check for CLN
AC_MSG_CHECKING(for CLN)
AC_LANG(C++)
old_LIBS=$LIBS
LIBS="-lcln $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include "cln/cln.h"
using namespace cln;
]], [[
 cl_F a;
]])],[
 AC_DEFINE([HAVE_CLN], 1, [CLN was here and could be used])
 AC_MSG_RESULT(yes)
],[
 LIBS=$old_LIBS
 AC_MSG_RESULT(no)
])
AC_LANG(C)

dnl Must be checked after including the libm
AC_CHECK_FUNCS([exp exp2 exp10 expm1])
AC_CHECK_FUNCS([sin cos tan asin acos atan sinh cosh tanh asinh acosh atanh])
AC_CHECK_FUNCS([log log2 log10 log1p atan2])
AC_CHECK_FUNCS([tgamma sqrt pow cbrt erf erfc])

AC_CHECK_FUNCS([expf exp2f exp10f expm1f])
AC_CHECK_FUNCS([sinf cosf tanf asinf acosf atanf sinhf coshf tanhf asinhf acoshf atanhf])
AC_CHECK_FUNCS([logf log2f log10f log1pf atan2f])
AC_CHECK_FUNCS([tgammaf sqrtf powf cbrtf erff erfcf])

AC_CHECK_FUNCS([expl exp2l exp10l expm1l])
AC_CHECK_FUNCS([sinl cosl tanl asinl acosl atanl sinhl coshl tanhl asinhl acoshl atanhl])
AC_CHECK_FUNCS([logl log2l log10l log1pl atan2l])
AC_CHECK_FUNCS([tgammal sqrtl powl cbrtl erfl erfcl])

dnl Check for How to set the rounding mode
AC_MSG_CHECKING(for how to select rounding mode)
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FENV_H
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FENV_H]) AC_MSG_RESULT([fenv.h]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_IEEEFP_H
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_IEEEFP_H]) AC_MSG_RESULT([ieeefp.h]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_GCC_I386ASM
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_GCC_I386ASM]) AC_MSG_RESULT([i386 asm]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_SYS_FPU_H
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_SYS_FPU_H]) AC_MSG_RESULT([sys/fpu.h]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_MATH_H
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_MATH_H]) AC_MSG_RESULT([math.h]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FLOATINGPOINT_H_1
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FLOATINGPOINT_H_1]) AC_MSG_RESULT([floatingpoint.h (1)]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FLOATINGPOINT_H_2
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FLOATINGPOINT_H_2]) AC_MSG_RESULT([floatingpoint.h (2)]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FLOAT_H_1
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FLOAT_H_1]) AC_MSG_RESULT([float.h (1)]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FLOAT_H_2
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FLOAT_H_2]) AC_MSG_RESULT([float.h (2)]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FLOAT_H_3
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FLOAT_H_3]) AC_MSG_RESULT([float.h (3)]),
AC_RUN_IFELSE(AC_LANG_SOURCE[[
#define USE_FPUCONTROL_H
#define WITHIN_CONFIGURE
#include "rnd_mode.c"
]], AC_DEFINE([USE_FPUCONTROL_H]) AC_MSG_RESULT([fpucontrol.h]),
 AC_MSG_ERROR([[Can't find a way to select rounding mode.]]))))))))))))

# Recent autoconf creates AC_DEFINEs of PACKAGE_VERSION etc, unfortunately
# those -D defines in $DEFS conflict with the same defines in config.h from
# GMP.  Unless or until autoconf gives us a better way for two closely
# related packages to cooperate, use this hack to get rid of them from $DEFS
# here.
#
if test -f confdefs.h; then
  sed '/#define PACKAGE_/d' <confdefs.h >confdefs.tmp
  mv confdefs.tmp confdefs.h
fi

AC_SUBST(CPPFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(DEFS)
AC_OUTPUT([Makefile])

